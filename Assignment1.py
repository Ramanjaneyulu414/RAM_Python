# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DwCd0dwu52FYPhiuWp2ujK_k2igrEyaI
"""

#Exercise 1: Age Calculator (20 points)
#Create a program that:
#1. Asks the user to input their birth date in mm/dd/yyyy format
#2. Validates the input format and ensures it’s a valid date
#3. Calculates and displays their current age in years
#4. Converts and displays the birthdate in IST format (dd/mm/yyyy)
#5. Handles all possible errors gracefully with appropriate messagesfrom datetime import datetime

def main():
  try:
    birth_date_input=input("Enter your birth date(mm/dd/year):")
    birth_date=datetime.strptime(birth_date_input,"%m/%d/%Y")
    today=datetime.today()
    age=today.year-birth_date.year
    if (today.month,today.day)<(birth_date.month,birth_date.day):
      age-=1
    birth_date_lst=birth_date.strftime("%d/%m/%y")
    print("\n birth date is valid!")
    print("your age is:",age,"years")
    print("your birth date in lst format:",birth_date_lst)
  except ValueError:
    print("Invalid date format. Please use mm/dd/year.")
main()

#Exercise 2: Prime Number Generator (20 points)
#Write a program that:
#1. Takes two positive integers as input (range start and end)
#2. Validates the input (must be positive integers)
#3. Finds all prime numbers within the given range (inclusive)
#4. Displays the primes in a formatted output (10 numbers per line)
#5. Handles invalid inputs gracefullydef is_prime(n):
  if n<2:
    return False
  for i in range(2,int(n**0.5)+1):
    if n%i==0: # Corrected the modulo operator from 1 to i
      return False
  return True

try:
  start=int(input("enter starting number"))
  end=int(input("enter ending number"))
  if start<=0 or end<=0:
    print("enter positive numbers only.")
  elif start>end:
    print("starting number should be less than or ending number.")
  else:
    primes=[n for n in range(start,end+1) if is_prime(n)]
    if primes: # Corrected the if statement condition
      print("primes numbers:") # Moved print outside the if condition
      for i,p in enumerate(primes,1):
        print(p,end=" ") # Added a space for better formatting
        if i%10==0:
          print()
    else:
       print("no primes found in the given range.")
except ValueError:
  print("invalid input please enter integers.")

#Exercise 3 : Student Marks Processor (20 points)
#Develop a program that:
#1. Reads student marks data from a file (registration number, exam mark, coursework mark)
#2. Computes overall marks using given weighting
#3. Assigns grades based on specific rules
#4. Creates a structured NumPy array
#5. Sorts students by overall mark
#6. Writes results to an output file
#7. Displays grade statistics
#8. Handles all errors gracefullyimport numpy as np

# ---------------- Configuration ----------------
INPUT_FILE = """101, 68, 72
102, 45, 55
103, 88, 92
104, 30, 40
105, 60, 58
"""
OUTPUT_FILE = "student.results.txt"
EXAM_WEIGHT = 0.7
COURSEWORK_WEIGHT = 0.3

# ---------------- Grade Rules ----------------
def assign_grade(overall):
    if overall >= 70:
        return "A"
    elif overall >= 60:
        return "B"
    elif overall >= 50:
        return "C"
    elif overall >= 40:
        return "D"
    else:
        return "F"

# ---------------- Read Input ----------------
def read_data(filename):
    students = []
    try:
        # Read data from the string variable instead of a file
        lines = filename.strip().split('\n')
        for line in lines:
            parts = line.strip().split(",")
            if len(parts) != 3:
                continue  # skip invalid line
            try:
                reg_no = parts[0].strip()
                exam = float(parts[1].strip())
                coursework = float(parts[2].strip())
                overall = exam * EXAM_WEIGHT + coursework * COURSEWORK_WEIGHT
                grade = assign_grade(overall)
                students.append((reg_no, exam, coursework, overall, grade))
            except ValueError:
                continue  # skip invalid numbers
    except FileNotFoundError:
        # This won't be reached since we are reading from a string
        print(f" File '{filename}' not found!")
    return students


# ---------------- Structured Array ----------------
def create_numpy_array(students):
    dtype = [
        ("reg_no", "U20"),
        ("exam", "f4"),
        ("coursework", "f4"),
        ("overall", "f4"),
        ("grade", "U2")
    ]
    return np.array(students, dtype=dtype)

# ---------------- Write Output ----------------
def write_results(filename, students):
    with open(filename, "w") as file:
        file.write("RegNo, Exam, Coursework, Overall, Grade\n")
        for s in students:
            file.write(f"{s['reg_no']}, {s['exam']}, {s['coursework']}, {s['overall']:.2f}, {s['grade']}\n")

# ---------------- Grade Statistics ----------------
def grade_statistics(students):
    unique, counts = np.unique(students["grade"], return_counts=True)
    stats = dict(zip(unique, counts))
    print("\n Grade Statistics:")
    for grade, count in stats.items():
        print(f"  {grade}: {count}")

# ---------------- Main ----------------
def main():
    # Pass the string data directly to read_data
    students = read_data(INPUT_FILE)
    if not students:
        print("No valid student data found.")
        return

    student_array = create_numpy_array(students)
    sorted_students = np.sort(student_array, order="overall")[::-1]  # descending order

    write_results(OUTPUT_FILE, sorted_students)

    print("\n Results written to", OUTPUT_FILE)
    grade_statistics(sorted_students)
    print("\nTop 3 Students (by Overall Marks):")
    for s in sorted_students[:3]:
        print(f"  {s['reg_no']} - {s['overall']:.2f} ({s['grade']})")

if __name__ == "__main__":
    main()

#Exercise 4: String Analyzer (20 Points)
#Task: Write a Python program that:
#1. Asks the user to input a sentence.
#2. Counts and displays:
#• Number of words
#• Number of vowels & consonants
#• Number of uppercase & lowercase letters
#3. Finds and displays the longest word.
#4. Reverses the entire sentence and prints it.
#5. Handles empty or invalid inputs gracefully.# Function to analyze the sentence
def analyze_sentence(sentence):
    words = sentence.split()
    word_count = len(words)

    vowels = "aeiouAEIOU"
    vowel_count = 0
    consonant_count = 0
    uppercase_count = 0
    lowercase_count = 0

    for char in sentence:
        if char.isalpha():
            if char in vowels:
                vowel_count += 1
            else:
                consonant_count += 1
            if char.isupper():
                uppercase_count += 1
            elif char.islower():
                lowercase_count += 1

    longest_word = max(words, key=len) if words else ""
    reversed_sentence = sentence[::-1]

    # Display results
    print("\n--- String Analysis ---")
    print("Number of words:", word_count)
    print("Number of vowels:", vowel_count)
    print("Number of consonants:", consonant_count)
    print("Number of uppercase letters:", uppercase_count)
    print("Number of lowercase letters:", lowercase_count)
    print("Longest word:", longest_word)
    print("Reversed sentence:", reversed_sentence)

# Main program with input validation
def main():
    sentence = input("Please enter a sentence: ").strip()

    if not sentence:
        print("Error: You entered an empty sentence. Please try again.")
        return

    analyze_sentence(sentence)

# Run the program
main()

# Exercise 5: Sales Data Analysis with Pandas (20 Points)
#Task: Create a program that:
#1. Reads a CSV file containing sales data with columns: Date, Product, Quantity, Price.
#2. Calculates Total_Sales = Quantity × Price.
#3. Finds the top 3 products by sales amount.
#4. Groups data by Product and shows total revenue per product.
#5. Displays the highest sales day.
#6. Plots a simple bar chart of product-wise revenue (optional bonus).
#7. Handles file-not-found and other errors gracefully.
import pandas as pd
import matplotlib.pyplot as plt
import io

def main():
    sales_data="""date,product,quantity,price
01/01/2023,A,10,20.50
01/01/2023,B,5,15.00
01/02/2023,A,8,20.50
01/02/2023,C,12,10.00
01/03/2023,B,6,15.00
01/03/2023,C,15,10.00
"""
    try:
        # Use io.StringIO to read the string data as if it were a file
        df = pd.read_csv(io.StringIO(sales_data))

        # Save the dataframe to a CSV file (optional, if you need the file saved)
        df.to_csv("sales_data.csv",index=False)

        # Check if required columns exist
        required_columns = {'date', 'product', 'quantity', 'price'}
        if not required_columns.issubset(df.columns):
            missing = required_columns - set(df.columns)
            print(f"Error: Missing columns in CSV file: {missing}")
            return

        # Calculate total sales for each row
        df['total_sales'] = df['quantity'] * df['price']

        # Group by product and sum total sales
        revenue_per_product = df.groupby('product')['total_sales'].sum()

        # Print the revenue per product
        print("Total Revenue per Product:")
        print(revenue_per_product)

        # Plot bar chart
        revenue_per_product.plot(kind='bar', color='skyblue', figsize=(8,5))

        plt.title('Product-wise Revenue')
        plt.xlabel('Product')
        plt.ylabel('Total Revenue ($)')
        plt.xticks(rotation=45)
        plt.tight_layout()  # Adjust layout to prevent clipping of labels

        plt.show()

    except FileNotFoundError:
        print("Error: 'sales_data.csv' file not found. Please check the file path and try again.")
    except pd.errors.EmptyDataError:
        print("Error: The CSV file is empty.")
    except pd.errors.ParserError:
        print("Error: The CSV file is corrupted or has invalid format.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    main()